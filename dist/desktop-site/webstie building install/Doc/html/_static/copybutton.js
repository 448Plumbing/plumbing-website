 function getCopyableText(rootElement) { rootElement = rootElement.cloneNode(true) const tracebacks = rootElement.querySelectorAll(".gt") for (const el of tracebacks) { while ( el.nextSibling && (el.nextSibling.nodeType !== Node.ELEMENT_NODE || !el.nextSibling.matches(".gp, .go")) ) { el.nextSibling.remove() } } const elements = rootElement.querySelectorAll(".gp, .go, .gt") for (const el of elements) { el.remove() } return rootElement.innerText.trim() } const loadCopyButton = () => { const button = document.createElement("button") button.classList.add("copybutton") button.type = "button" button.innerText = _("Copy") button.title = _("Copy to clipboard") const makeOnButtonClick = () => { let timeout = null return async event => { if (!navigator.clipboard || !navigator.clipboard.writeText) { return; } clearTimeout(timeout) const buttonEl = event.currentTarget const codeEl = buttonEl.nextElementSibling try { await navigator.clipboard.writeText(getCopyableText(codeEl)) } catch (e) { console.error(e.message) return } buttonEl.innerText = _("Copied!") timeout = setTimeout(() => { buttonEl.innerText = _("Copy") }, 1500) } } const highlightedElements = document.querySelectorAll( ".highlight-python .highlight," + ".highlight-python3 .highlight," + ".highlight-pycon .highlight," + ".highlight-pycon3 .highlight," + ".highlight-default .highlight" ) highlightedElements.forEach(el => { el.style.position = "relative" const clonedButton = button.cloneNode(true) clonedButton.onclick = makeOnButtonClick() el.prepend(clonedButton) }) } if (document.readyState !== "loading") { loadCopyButton() } else { document.addEventListener("DOMContentLoaded", loadCopyButton) } 
